#!/usr/bin/env python
import sys
import os
#import argparse
from keystoneclient.v2_0 import client
from keystoneclient import exceptions
#from glance import client as glanceclient
#from glance.common import exception
#from glance.common import utils
#from glance import version


STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3

try:
    c = client.Client(username=os.environ["OS_USERNAME"],
                  tenant_name=os.environ["OS_TENANT_NAME"],
                  password=os.environ["OS_PASSWORD"],
                  auth_url=os.environ["OS_AUTH_URL"],
                  region_name=os.environ["OS_REGION_NAME"])
    if not c.authenticate():
        raise Exception("Authentication failed")
#    if not args.no_admin:
    if not c.tenants.list():
        raise Exception("Tenant list is empty")
except Exception as e:
    print str(e)
    sys.exit(STATE_CRITICAL)

msgs = []
endpoints = c.service_catalog.get_endpoints()
#services = args.services or endpoints.keys()
services = endpoints.keys()
for service in services:
    if not service in endpoints.keys():
        msgs.append("`%s' service is missing" % service)
        continue

    if not len(endpoints[service]):
        msgs.append("`%s' service is empty" % service)
        continue

    if not any([ "publicURL" in endpoint.keys() for endpoint in endpoints[service] ]):
        msgs.append("`%s' service has no publicURL" % service)

if msgs:
    print ", ".join(msgs)
    sys.exit(STATE_WARNING)

print "Got token %s for user %s and tenant %s with management URL %s" % (c.auth_token, c.auth_user_id, c.auth_tenant_id, c.management_url)
print "Keystone checked!"
KEYSTONE_OK=1
